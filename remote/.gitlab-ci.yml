stages:
- preflight
- plan
- apply
- destroy

variables:
  PATH_TO_SCRIPT: "remote"
  MAIN_PATH: "${CI_PROJECT_DIR}/${PATH_TO_SCRIPT}"
  TF_VAR_argocd_certificate: ${argocd_certificate}
  TF_VAR_argocd_helm_chart_version: ${argocd_helm_chart_version}
  TF_VAR_argocd_hostname: ${argocd_hostname}
  TF_VAR_AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
  TF_VAR_aws_eks_cluster_name: ${aws_eks_cluster_name}
  TF_VAR_aws_eks_cluster_version: ${aws_eks_cluster_version}
  TF_VAR_aws_lbc_helm_chart_version: ${aws_lbc_helm_chart_version}
  TF_VAR_CI_PROJECT_ID: ${CI_PROJECT_ID}
  TF_VAR_developer_user: ${developer_user}
  TF_VAR_env: ${env}
  TF_VAR_hosted_zone_id: ${hosted_zone_id}
  TF_VAR_manager_user: ${manager_user}
  TF_VAR_repo_1_name: ${repo_1_name}
  TF_VAR_repo_1_ssh_key: ${repo_1_ssh_key}
  TF_VAR_repo_1_url: ${repo_1_url}
  TF_VAR_repo_2_name: ${repo_2_name}
  TF_VAR_repo_2_ssh_key: ${repo_2_ssh_key}
  TF_VAR_repo_2_url: ${repo_2_url}

image:
  name: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/1.4:v1.0.0"

cache:
  key: "${CI_PROJECT_ID}"
  paths:
  - $PATH_TO_SCRIPT/.terraform/

default:
  before_script:
  - cd ${MAIN_PATH}
  - remote_dir=$(pwd)
  - >
    gitlab-terraform init 
    -backend-config="address=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/terraform/state/$TF_STATE_NAME" 
    -backend-config="lock_address=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/terraform/state/$TF_STATE_NAME/lock" 
    -backend-config="unlock_address=https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/terraform/state/$TF_STATE_NAME/lock" 
    -backend-config="username=$GL_USERNAME" 
    -backend-config="password=$TF_ACCESS_TOKEN" 
    -backend-config="lock_method=POST" 
    -backend-config="unlock_method=DELETE" 
    -backend-config="retry_wait_min=5" 

preflight-tf-script:
  stage: preflight
  when: manual
  script:
  - cd ${MAIN_PATH}
  - gitlab-terraform validate

plan-tf-script:
  stage: plan
  when: manual
  script:
  - cd ${MAIN_PATH}
  - ls -la
  - gitlab-terraform plan
  - gitlab-terraform plan-json
  needs:
  - job: preflight-tf-script
  artifacts:
    paths:
    - $PATH_TO_SCRIPT/plan.cache
    reports:
      terraform: $PATH_TO_SCRIPT/plan.json

apply-tf-script:
  stage: apply
  when: manual
  script:
  - cd ${MAIN_PATH}
  - ls -la
  - gitlab-terraform apply -auto-approve
  needs:
  - job: plan-tf-script
  environment:
    name: $TF_STATE_NAME

destroy-tf-script:
  stage: destroy
  when: manual
  script:
  - cd ${MAIN_PATH}
  - gitlab-terraform destroy
  needs:
  - job: apply-tf-script
  environment:
    name: $TF_STATE_NAME